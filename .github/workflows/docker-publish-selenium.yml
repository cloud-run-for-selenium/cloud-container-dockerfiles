name: Publish Selenium

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master", "selenium-workflows" ]
    # Publish semver tags as releases.
    tags: [ '*' ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  # github.repository as <account>/<repo>
  REGISTRY: 'docker.io'
  #IMAGE_NAME: 'jamesmortensen/selenium-chrome-cloud'


jobs:
  # build-matrix:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - id: set-matrix
  #       run: |
  #         echo "browser=['firefox']" >> $GITHUB_OUTPUT
  #         echo "arch=['amd64','arm64']" >> $GITHUB_OUTPUT
  #   outputs:
  #     browser: ${{ steps.set-matrix.outputs.browser }}
  #     arch: ${{ steps.set-matrix.outputs.arch }}
  prepare-draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Prepare draft 
        if: ${{ github.event_name != 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=$(date +'%Y%m%d')-selenium-cloud-containers
          git tag v$RELEASE_TAG
          git push origin v$RELEASE_TAG
          echo "Selenium Cloud Container browser images are published to Docker Hub at [$IMAGE_NAME](https://hub.docker.com/r/$IMAGE_NAME/tags) and contains the following resources: " > release_notes.md
          echo "" >> release_notes.md
          REPO=`echo $GITHUB_REPOSITORY | tr '/' '\n' | tail -n 1`
          go install github.com/github-release/github-release@v0.10.0
          echo "Set release notes"
          ~/go/bin/github-release release --draft -u $GITHUB_REPOSITORY_OWNER -r $REPO --tag v$RELEASE_TAG --name $RELEASE_TAG --description "`cat release_notes.md`"


  push-to-docker-hub:
    needs: prepare-draft-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        # browser: ${{ fromJson(needs.build-matrix.outputs.browser }}
        # arch: ${{ fromJson(needs.build-matrix.outputs.arch }}
        browser: [ firefox ]
        arch: [ amd64, arm64 ]
        include:
          - browser: edge 
            arch: amd64
          - browser: chrome
            arch: amd64
          - browser: chromium
            arch: arm64
    env:
      ARCH: ${{ matrix.arch }}
      BROWSER: ${{ matrix.browser }}
      IMAGE_NAME: jamesmortensen/standalone-${{ matrix.browser }}-cloud-${{ matrix.arch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      # - name: Build and push Docker image
      #   id: build-and-push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: Dockerfile.epiphany.nginx
      #     push: ${{ github.event_name != 'pull_request' }}
      #     #tags: ${{ steps.meta.outputs.tags }}
      #     tags: ${{ steps.tagging.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     platforms: linux/amd64,linux/arm64
      - name: Build and push Docker image with Buildx (don't push on PR)
        id: build-and-push
        env:
          SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}
        #   ARCH: ${{ matrix.arch }}
        #   BROWSER: ${{ matrix.browser }}
        run: |
          if [ "$SHOULD_PUSH" = "true" ]; then
            export PUSH_ARG="--push"
          sh docker-build-image.sh $ARCH $BROWSER

      - name: Create Tags
        id: tagging
        run: |
          BUILD_DATE=$(date +'%Y%m%d')
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$BUILD_DATE,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          IMAGE=`echo $IMAGE_NAME | sed 's/.*\///g'`
          echo "release_tag=$BUILD_DATE-$IMAGE" >> $GITHUB_OUTPUT
      
      - name: Check release tag
        run: echo ${{ steps.tagging.outputs.release_tag }}

      - name: Prepare Draft Release
        if: ${{ github.event_name != 'pull_request' }}  # || contains(toJson(github.event.commits), '[deploy]') == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BROWSER: ${{ matrix.browser }}
          ARCH: ${{ matrix.arch }}
        run: |
          RELEASE_TAG=$(date +'%Y%m%d')-selenium-$BROWSER-$ARCH-cloud
          git tag v$RELEASE_TAG
          git push origin v$RELEASE_TAG
          echo "* standalone-$BROWSER-$ARCH-cloud is published to Docker Hub at [$IMAGE_NAME](https://hub.docker.com/r/$IMAGE_NAME/tags) and contains the following resources: " > release_notes.md
          echo "" >> release_notes.md

          if [ "$BROWSER" = "firefox" ]; then
            export DRIVER_VERSION_COMMAND="/usr/bin/geckodriver --version | head -n 1"
            export BROWSER_VERSION_COMMAND="firefox -version"
          elif [ "$BROWSER" = "chrome" ]; then
            export DRIVER_VERSION_COMMAND="/usr/bin/chromedriver -version"
            export BROWSER_VERSION_COMMAND="google-chrome -version"
          elif [ "$BROWSER" = "chromium" ]; then
            export DRIVER_VERSION_COMMAND="/usr/bin/chromedriver -version"
            export BROWSER_VERSION_COMMAND="/usr/bin/chromium -version"
          elif [ "$BROWSER" = "edge" ]; then
            export DRIVER_VERSION_COMMAND="/usr/bin/msedgedriver -version"
            export BROWSER_VERSION_COMMAND="microsoft-edge -version"
          fi
          echo docker run --rm --platform linux/$ARCH $IMAGE_NAME bash -c "$BROWSER_VERSION_COMMAND"
          echo docker run --rm --platform linux/$ARCH $IMAGE_NAME bash -c "$DRIVER_VERSION_COMMAND"
          BROWSER_VERSION=`docker run --rm --platform linux/$ARCH $IMAGE_NAME bash -c "$BROWSER_VERSION_COMMAND"`
          DRIVER_VERSION=`docker run --rm --platform linux/$ARCH $IMAGE_NAME bash -c "$DRIVER_VERSION_COMMAND"`
          echo "  + $BROWSER: $BROWSER_VERSION" >> release_notes.md
          echo "  + $BROWSER WebDriver: $DRIVER_VERSION" >> release_notes.md
          NGINX_VERSION=`docker run --rm --platform linux/$ARCH $IMAGE_NAME bash -c "nginx -v" | tail -n 1`
          echo $NGINX_VERSION >> release_notes.md
          REPO=`echo $GITHUB_REPOSITORY | tr '/' '\n' | tail -n 1`
          go install github.com/github-release/github-release@v0.10.0
          echo "Get draft release notes"
          DRAFT_RELEASE_TAG=$(date +'%Y%m%d')-selenium-cloud-containers
          ~/go/bin/github-release info -u $GITHUB_REPOSITORY_OWNER -r $REPO --tag v$DRAFT_RELEASE_TAG -j > draft-release.json
          node .github/workflows/bin/get-release-notes.js > draft_release_notes.md
          echo "Set release notes"
          cat release_notes.md >> draft_release_notes.md
          ~/go/bin/github-release edit -u $GITHUB_REPOSITORY_OWNER -r $REPO --tag v$RELEASE_TAG --name $RELEASE_TAG --description "`cat draft_release_notes.md`"

    
    outputs:
      release_tag: ${{ steps.tagging.outputs.release_tag }}

  publish-release-notes:
    needs: push-to-docker-hub
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    
    steps:
      - name: Publish release
        if: ${{ github.event_name != 'pull_request' }}  # || contains(toJson(github.event.commits), '[deploy]') == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.push-to-docker-hub.outputs.release_tag }}
        run: |
          REPO=`echo $GITHUB_REPOSITORY | tr '/' '\n' | tail -n 1`
          go install github.com/github-release/github-release@v0.10.0
          echo "Publish the release"
          ~/go/bin/github-release release -u $GITHUB_REPOSITORY_OWNER -r $REPO --tag v$RELEASE_TAG --name $RELEASE_TAG --description "`cat release_notes.md`"
